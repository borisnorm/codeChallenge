#Best Practice, make sure you git commit history is good an specific
1. Ask how I can make this code more maintainable in the future

#Basic Style
1. Readability and  Reusability more important than lies of code 
2.Use Semi Colons 

#Variables and names 
1. A variable should be delcared if used more than 2 or three times 
  -Be as descriptive as possible like not just item but, taxRecipeItem
  *Object declarations are caps, but variables should be camelCase
2. Make sure all variables are nouns


#Dealing with numbers
1.Always assume monetary amount is in cents 



#Function and private methods?
1. Be consistent make sure your components are always calling the same functions


#Function structure 
1. If using unless dont use else 
2. 


#In app erro checking
*Two ways to handle errors we can use 
  -Throw and error and crash it no point,
  -Or we can just log it an let it play out
1. A save should never return a 404
2. dont bind will return a does not exist
3. Catch Large errors like the database is down, code should be robus, and error log it




# Testing
 * Make sure to have alot of check cases looking for things like undefined 
 * Make sure the errors returned are unique
 1. Edge Cases 
 2. Sanity Check
 3. Go through you work flow, and all of the possible states could end up in and go through each logical branch
 4. Check for null or malformed data, you should test that I am not 
 able to click things for example that is the hard malformed data case
 5. If you have certain bugs, then add a test for that certain bug 
 6. Want to discuss test cases for a specific project
 7. An example is the tic-tac-toe game, concentrate on testing the 
 hard projects
 8. If you try to modify something actually run test to make sure the value is there or if it is
 not there if you delete it
 9. Run battery of standard tests 
10. Check if there is a save fail


#A asynch library suggestion
1. Try not to use waterfall
2. Asynch series might be the best 


#Angular Comments
1. To reset, scope variable upon refresh use $scope.clear(),
  instead of manual refresh
  -Scope, copy might be a better solution

2. In dentation is important, make sure there are indents after body
  -I found the css does not scale to shrink

3. In the error handling function, do not put res, there, only use error or blank
4. Validate 3rd party API results,
  -by checking TYPE or field name
5. Use ng-class or ng-stype no manipulate element style
  *Have not implemented this given the dynamic beep issue


  -Do not try to manually set it in the angular controller
6. Do NOT use x === false, the variable itself should be true or falsey, so 
just do ($scope.buttonLock) instead
  -I was straight up missing scope button lock
7. Never try to manually list out the free positions, somtimes you can use 
  -Object.keys(), to get a list of them yourself
8. Better way to re-write internal function logic (??? Make sure I understand this)

Original
  if (placed move returns false)
    alert(not valid move)
  else 
    if (check victory)
      end game 
    else:
      play the scope move

Edited
  if (plcaed move returns false)
    alert(not valid move)
  else if (checkVictory is false)
    cpu.move()
  
Comments 
  -This trims out another if statement which make it more efficent
  -it also smartly delete repition by calling the check victory, which
  takes everying else, else this game system state is not valid-


9. Always use Triple equality checks, the more you check the better

10. You can ALMOST ALWAYS, turn the hard coded victory checks into for loops 
  -You can apply this to more of these arguments

11. Always minize code within the inside if/else blocks if possible
  *One way it to interchange if else blocks, ***???I am not quite sure what this means please ask

Original Code:
    $scope.timeTick = function() {
      if ($scope.timeLeft <= 0) {
        alert("Time is Up! Start the Timer Again")
        $scope.timeLeft = 2500;
        $scope.stopCount();
        return 
      }
      $scope.timeLeft = $scope.timeLeft - 1;
    };

//New Code
    $scope.timeTick = function() {
      if ($scope.timeLeft > 0) {
        return $scope.timeLeft = $scope.timeLeft - 1;
      }
      alert("Time is UP Start the Timer Again");
      $scope.timeLeft = 2500;
      $scope.stopCount();
    };
The Key thing here is that 
  -Take advantage of a return statement, to cut out the need 
  for an else statement, clean and interesting design

12. Make sure there are NOT SEMI COLONS inside the { } 

13. There is an Error, streamData, and not streamDatal

#React Stack 
1. What does the callback function do? 

  loadDataFromServer() {
    const { url } = this.props;
    console.log("load data from server called at" + url);
    $.ajax({
      url: url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        
        $The extra callback here, is mute, i just send to 
        dispatch, no need to add it back
        store.dispatch(updateBoard(data), function() {
        })
       },
       error: function(xhr, status, err) {
        console.error(url, status, err.toString());
       }
    })
  }; 






















